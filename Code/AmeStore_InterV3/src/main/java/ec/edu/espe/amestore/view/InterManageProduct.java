package ec.edu.espe.amestore.view;

import conexion.Conexion;
import controlador.Ctrl_Categoria;
import controlador.Ctrl_Product;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Category;
import model.Product;

/**
 *
 * @author User
 */
public class InterManageProduct extends javax.swing.JInternalFrame {

    private static JTable jTable_product;

    private int idProduct;
    int getComboCategoryId = 0;

    public InterManageProduct() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("Manage Products");
        //Cargar tabla
        this.LoadTableProducts();
        this.LoadTableProducts();

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 500, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        jComboBox_iva = new javax.swing.JComboBox<>();
        jComboBox_categoria = new javax.swing.JComboBox<>();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Administrar Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 730, 270));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 50, 130, 270));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, -1));

        txt_nombre.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 170, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Cantidad:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 90, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Precio:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 90, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Descripcion:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 90, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("IVA:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 90, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Categoria:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 90, -1));

        txt_cantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_cantidad.setEnabled(false);
        jPanel3.add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 170, -1));

        txt_precio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 170, -1));

        txt_descripcion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 170, -1));

        jComboBox_iva.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_iva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione iva:", "No grava iva", "12%", "14%" }));
        jPanel3.add(jComboBox_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 150, -1));

        jComboBox_categoria.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione categoria:", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jComboBox_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, 150, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 870, 100));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed

        Product product = new Product();
        Ctrl_Product controlProduct = new Ctrl_Product();
        String iva = "";
        String categoria = "";
        iva = jComboBox_iva.getSelectedItem().toString().trim();
        categoria = jComboBox_categoria.getSelectedItem().toString().trim();

        //validar campos
        if (txt_name.getText().isEmpty() || txt_amount.getText().isEmpty() || txt_price.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Complete all fields");
        } else {
            if (iva.equalsIgnoreCase("Select iva:")) {
                JOptionPane.showMessageDialog(null, "Select iva.");
            } else {
                if (category.equalsIgnoreCase("Select category:")) {
                    JOptionPane.showMessageDialog(null, "Select category");
                } else {
                    try {
                        product.setName(txt_name.getText().trim());
                        product.setAmount(Integer.parseInt(txt_amount.getText().trim()));
                        String priceTXT = "";
                        double Price = 0.0;
                        priceTXT = txt_price.getText().trim();
                        boolean aux = false;
                        /*
                            *Si el usuario ingresa , (coma) como punto decimal,
                            lo transformamos a punto (.)
                         */
                        for (int i = 0; i < priceTXT.length(); i++) {
                            if (priceTXT.charAt(i) == ',') {
                                String priceNew = priceTXT.replace(",", ".");
                                Price = Double.parseDouble(priceNew);
                                aux = true;
                            }
                        }
                        //evaluar la condicion
                        if (aux == true) {
                            product.setPrice(Price);
                        } else {
                            Price = Double.parseDouble(priceTXT);
                            product.setPrice(Price);
                        }

                        product.setDescription(txt_description.getText().trim());
                        //Porcentaje IVA
                        if (iva.equalsIgnoreCase("Does not gravel iva")) {
                            product.setPorcentageIva(0);
                        } else if (iva.equalsIgnoreCase("12%")) {
                            product.setPorcentageIva(12);
                        } else if (iva.equalsIgnoreCase("15%")) {
                            product.setPorcentageIva(15);
                        }

                        //idcategoria - cargar metodo que obtiene el id de categoria
                        this.IdCategory();
                        product.setIdCategory(getComboCategoryId);
                        product.setStatus(1);

                        if (controlProduct.update(product, idProduct)) {
                            JOptionPane.showMessageDialog(null, "Updated Registration");
                            this.LoadComboCategory();
                            this.LoadTableProducts();
                            this.jComboBox_iva.setSelectedItem("Select iva:");
                            this.clean();
                        } else {
                            JOptionPane.showMessageDialog(null, "Update Error");
                        }
                    } catch (HeadlessException | NumberFormatException e) {
                        System.out.println("Error en: " + e);
                    }
                }
            }
        }

    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        Ctrl_Product controlProduct = new Ctrl_Product();
        if (idProduct == 0) {
            JOptionPane.showMessageDialog(null, "¡Select a Product!");
        } else {
            if (!controlProduct.delete(idProduct)) {
                JOptionPane.showMessageDialog(null, "¡Removed Product!");
                this.LoadTableProducts();
                this.LoadComboCategory();
                this.clean();
            } else {
                JOptionPane.showMessageDialog(null, "¡Product deletion error!");
            }
        }
    }//GEN-LAST:event_jButton_eliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JComboBox<String> jComboBox_categoria;
    private javax.swing.JComboBox<String> jComboBox_iva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables

    /*
     * *****************************************************
     * metodo para limpiar
     * *****************************************************
     */
    private void Clean() {
        txt_name.setText("");
        txt_amount.setText("");
        txt_price.setText("");
        txt_description.setText("");
        jComboBox_iva.setSelectedItem("Select iva:");
        jComboBox_category.setSelectedItem("Select category:");
    }

    /*
     * *****************************************************
     * metodo para cargar las categorias en el JCombox
     * *****************************************************
     */
    private void LoadComboCategory() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_categoria";
        Statement st;
        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_category.removeAllItems();
            jComboBox_category.addItem("Select category:");
            while (rs.next()) {
                jComboBox_category.addItem(rs.getString("description"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("¡Error loading categories!");
        }
    }

    /*
     * *****************************************************
     * metodo para mostrar todos los productos registrados
     * *****************************************************
     */
    String descriptionCategory = "";
    double price = 0.0;
    int porcentageIva = 0;
    double IVA = 0;

    private void LoadTableProducts() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select p.idProduct, p.name, p.amount, p.price, p.description, p.porcentageIva, c.descritcion, p.status from tb_product As p, tb_category As c where p.idCategory = c.idCategory;";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterManageProduct.jTable_product = new JTable(model);
            InterManageProduct.jScrollPane1.setViewportView(InterManageProduct.jTable_productos);

            model.addColumn("N°");//ID
            model.addColumn("name");
            model.addColumn("amount");
            model.addColumn("price);
            model.addColumn("description");
            model.addColumn("Iva");
            model.addColumn("Category");
            model.addColumn("status");

            while (rs.next()) {

                price = rs.getDouble("price");
                porcentageIva = rs.getInt("porcentageIva");

                Object fila[] = new Object[8];
                for (int i = 0; i < 8; i++) {

                    if (i == 5) {
                        this.calcularIva(price, porcentageIva);//metodo
                        fila[i] = IVA;
                        rs.getObject(i + 1);
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }
                }
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error filling the products table: " + e);
        }
        //evento para obtener campo al cual el usuario da click
        //y obtener la interfaz que mostrara la informacion general
        jTable_products.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_products.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idProduct = (int) model.getValueAt(fila_point, columna_point);
                    SendSelectedProductData(idProduct);//metodo
                }
            }

            private void SendSelectedProductData(int idProduct) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
    }

    /*
     * **************************************************
     * Metodo para calcular Iva
     * **************************************************
     */
    private double calcularIva(double price, int iva) {
        int p_iva = iva;
        switch (p_iva) {
            case 0:
                IVA = 0.0;
                break;
            case 12:
                IVA = price * 0.12;
                break;
            case 15:
                IVA = price * 0.15;
                break;
            default:
                break;
        }
        //redondear decimales
        IVA = (double) Math.round(IVA * 100) / 100;
        return IVA;
    }

    /*
     * **************************************************
     * Metodo que envia datos seleccionados
     * **************************************************
     */
    private void SendSelectedProductData(int idProduct) {
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement(
                    "select * from tb_producto where idProducto = '" + idProduct + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                txt_name.setText(rs.getString("name"));
                txt_amount.setText(rs.getString("amount"));
                txt_price.setText(rs.getString("price"));
                txt_description.setText(rs.getString("description"));
                int iva = rs.getInt("porcentageIva");
                switch (iva) {
                    case 0:
                        jComboBox_iva.setSelectedItem("Does not gravel iva");
                        break;
                    case 12:
                        jComboBox_iva.setSelectedItem("12%");
                        break;
                    case 14:
                        jComboBox_iva.setSelectedItem("15%");
                        break;
                    default:
                        jComboBox_iva.setSelectedItem("Select iva:");
                        break;
                }
                int idCate = rs.getInt("idCategory");
                jComboBox_category.setSelectedItem(relateCategory(idCate));
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error when selecting product: " + e);
        }
    }

    /*
     * **************************************************
     * Metodo para relacionar categorias
     * **************************************************
     */
    private String relateCategory(int idCategory) {

        String sql = "select descripcion from tb_categoria where idCategoria = '" + idCategory + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                descriptionCategory = rs.getString("description");
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("¡Error getting category id!");
        }
        return descriptionCategory;
    }

    /**
     *
     * Metodo para obtener id categoria
     */
    private int IdCategory() {
        String sql = "select * from tb_categoria where descripcion = '" + this.jComboBox_categoria.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                getComboCategoryId = rs.getInt("idCategory");
            }
        } catch (SQLException e) {
            System.out.println("Error when obtaining category id");
        }
        return getComboCategoryId;
    }
}
